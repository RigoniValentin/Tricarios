### Variables
@baseUrl = http://localhost:3015/api/v1
# Reemplazar con ID real de un producto existente en tu base de datos
@productId = 66f3c2e5a1b23d4e5f678901

###############################################################################
# üéØ TESTING SISTEMA DE SLOTS INDIVIDUALES DE IM√ÅGENES - NUEVAS RUTAS
###############################################################################

### 1. üìã Obtener informaci√≥n de slots de un producto
# GET /api/v1/products/:id/slots (NUEVO ENDPOINT)
GET {{baseUrl}}/products/{{productId}}/slots
Content-Type: application/json

### 2. üìä Verificar que el producto existe primero
# GET /api/v1/products/:id
GET {{baseUrl}}/products/{{productId}}
Content-Type: application/json

###############################################################################
# üîÑ ACTUALIZACI√ìN DE SLOTS INDIVIDUALES
###############################################################################

### 3. üì∏ Actualizar imagen en slot 0 (imagen principal)
# PUT /api/v1/products/:id/slots/0 (NUEVO ENDPOINT)
PUT {{baseUrl}}/products/{{productId}}/slots/0
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW

------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="image"; filename="new-primary-image.jpg"
Content-Type: image/jpeg

< ./imagenPrueba.png
------WebKitFormBoundary7MA4YWxkTrZu0gW--

### 4. üì∏ Actualizar imagen en slot 2 (tercera posici√≥n)
# PUT /api/v1/products/:id/slots/2 (NUEVO ENDPOINT)
PUT {{baseUrl}}/products/{{productId}}/slots/2
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW

------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="image"; filename="slot-3-image.jpg"
Content-Type: image/jpeg

< ./imagenPrueba.png
------WebKitFormBoundary7MA4YWxkTrZu0gW--

### 5. üì∏ Actualizar imagen en slot 5 (√∫ltima posici√≥n)
# PUT /api/v1/products/:id/slots/5 (NUEVO ENDPOINT)  
PUT {{baseUrl}}/products/{{productId}}/slots/5
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW

------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="image"; filename="slot-6-image.jpg"
Content-Type: image/jpeg

< ./imagenPrueba.png
------WebKitFormBoundary7MA4YWxkTrZu0gW--

###############################################################################
# ‚ùå ELIMINACI√ìN DE SLOTS INDIVIDUALES
###############################################################################

### 6. üóëÔ∏è Eliminar imagen del slot 5 (√∫ltima imagen agregada)
# DELETE /api/v1/products/:id/slots/5 (NUEVO ENDPOINT)
DELETE {{baseUrl}}/products/{{productId}}/slots/5
Content-Type: application/json

### 7. üóëÔ∏è Eliminar imagen del slot 2
# DELETE /api/v1/products/:id/slots/2 (NUEVO ENDPOINT)
DELETE {{baseUrl}}/products/{{productId}}/slots/2
Content-Type: application/json

###############################################################################
# üîÑ REORDENAMIENTO DE IM√ÅGENES
###############################################################################

### 8. üîÄ Reordenar imagen: mover del slot 0 al slot 1
# POST /api/v1/products/:id/slots/reorder (NUEVO ENDPOINT)
POST {{baseUrl}}/products/{{productId}}/slots/reorder
Content-Type: application/json

{
  "fromSlot": 0,
  "toSlot": 1
}

### 9. üîÄ Reordenar imagen: mover del slot 1 de vuelta al slot 0
# POST /api/v1/products/:id/slots/reorder (NUEVO ENDPOINT)
POST {{baseUrl}}/products/{{productId}}/slots/reorder
Content-Type: application/json

{
  "fromSlot": 1,
  "toSlot": 0
}

### 10. üîÄ Reordenar imagen: intercambiar slots 1 y 3
# POST /api/v1/products/:id/slots/reorder
POST {{baseUrl}}/products/{{productId}}/slots/reorder
Content-Type: application/json

{
  "fromSlot": 1,
  "toSlot": 3
}

###############################################################################
# ‚ö†Ô∏è CASOS DE ERROR Y VALIDACI√ìN
###############################################################################

### 11. ‚ùå Error: Slot inv√°lido (mayor a 5)
# PUT /api/v1/products/:id/slots/6 - Debe retornar 400
PUT {{baseUrl}}/products/{{productId}}/slots/6
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW

------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="image"; filename="invalid-slot.jpg"
Content-Type: image/jpeg

< ./imagenPrueba.png
------WebKitFormBoundary7MA4YWxkTrZu0gW--

### 12. ‚ùå Error: Slot inv√°lido (negativo)
# PUT /api/v1/products/:id/slots/-1 - Debe retornar 400
PUT {{baseUrl}}/products/{{productId}}/slots/-1
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW

------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="image"; filename="invalid-slot.jpg"
Content-Type: image/jpeg

< ./imagenPrueba.png
------WebKitFormBoundary7MA4YWxkTrZu0gW--

### 13. ‚ùå Error: Producto no encontrado
# GET /api/v1/products/000000000000000000000000/slots - Debe retornar 404
GET {{baseUrl}}/products/000000000000000000000000/slots
Content-Type: application/json

### 14. ‚ùå Error: Eliminar slot inv√°lido
# DELETE /api/v1/products/:id/slots/7 - Debe retornar 400
DELETE {{baseUrl}}/products/{{productId}}/slots/7
Content-Type: application/json

### 15. ‚ùå Error: Reordenamiento inv√°lido (slots iguales)
# POST /api/v1/products/:id/slots/reorder - Debe retornar 400
POST {{baseUrl}}/products/{{productId}}/slots/reorder
Content-Type: application/json

{
  "fromSlot": 2,
  "toSlot": 2
}

### 16. ‚ùå Error: Reordenamiento inv√°lido (slot fuera de rango)
# POST /api/v1/products/:id/slots/reorder - Debe retornar 400
POST {{baseUrl}}/products/{{productId}}/slots/reorder
Content-Type: application/json

{
  "fromSlot": 0,
  "toSlot": 6
}

### 17. ‚ùå Error: Actualizar sin imagen
# PUT /api/v1/products/:id/slots/0 (sin archivo) - Debe retornar 400
PUT {{baseUrl}}/products/{{productId}}/slots/0
Content-Type: application/json

{}

###############################################################################
# üß™ CASOS DE PRUEBA AVANZADOS
###############################################################################

### 18. üîÑ Verificar slots despu√©s de todas las operaciones
# GET /api/v1/products/:id/slots
GET {{baseUrl}}/products/{{productId}}/slots
Content-Type: application/json

### 19. üéØ Llenar todos los slots (test de 6 im√°genes)
# PUT /api/v1/products/:id/slots/0
PUT {{baseUrl}}/products/{{productId}}/slots/0
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW

------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="image"; filename="slot-0.jpg"
Content-Type: image/jpeg

< ./imagenPrueba.png
------WebKitFormBoundary7MA4YWxkTrZu0gW--

### 20. üéØ Slot 1
PUT {{baseUrl}}/products/{{productId}}/slots/1
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW

------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="image"; filename="slot-1.jpg"
Content-Type: image/jpeg

< ./imagenPrueba.png
------WebKitFormBoundary7MA4YWxkTrZu0gW--

### 21. üéØ Slot 2
PUT {{baseUrl}}/products/{{productId}}/slots/2
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW

------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="image"; filename="slot-2.jpg"
Content-Type: image/jpeg

< ./imagenPrueba.png
------WebKitFormBoundary7MA4YWxkTrZu0gW--

### 22. üéØ Slot 3
PUT {{baseUrl}}/products/{{productId}}/slots/3
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW

------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="image"; filename="slot-3.jpg"
Content-Type: image/jpeg

< ./imagenPrueba.png
------WebKitFormBoundary7MA4YWxkTrZu0gW--

### 23. üéØ Slot 4
PUT {{baseUrl}}/products/{{productId}}/slots/4
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW

------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="image"; filename="slot-4.jpg"
Content-Type: image/jpeg

< ./imagenPrueba.png
------WebKitFormBoundary7MA4YWxkTrZu0gW--

### 24. üéØ Slot 5
PUT {{baseUrl}}/products/{{productId}}/slots/5
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW

------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="image"; filename="slot-5.jpg"
Content-Type: image/jpeg

< ./imagenPrueba.png
------WebKitFormBoundary7MA4YWxkTrZu0gW--

### 25. üìä Verificar que se crearon todos los slots correctamente
GET {{baseUrl}}/products/{{productId}}/slots
Content-Type: application/json

### 26. üîÄ Test de reordenamiento completo: mover √∫ltima imagen al principio
POST {{baseUrl}}/products/{{productId}}/slots/reorder
Content-Type: application/json

{
  "fromSlot": 5,
  "toSlot": 0
}

### 27. üìä Verificar despu√©s del reordenamiento
GET {{baseUrl}}/products/{{productId}}/slots
Content-Type: application/json

###############################################################################
# üßπ LIMPIEZA Y VALIDACI√ìN FINAL
###############################################################################

### 28. üóëÔ∏è Eliminar m√∫ltiples slots (excepto el √∫ltimo)
DELETE {{baseUrl}}/products/{{productId}}/slots/4
Content-Type: application/json

### 29. üóëÔ∏è Eliminar otro slot
DELETE {{baseUrl}}/products/{{productId}}/slots/3
Content-Type: application/json

### 30. ‚ùå Intentar eliminar √∫ltima imagen (debe fallar)
# Primero verificar cu√°ntas im√°genes quedan
GET {{baseUrl}}/products/{{productId}}/slots
Content-Type: application/json

### 31. üìä Estado final del producto
GET {{baseUrl}}/products/{{productId}}
Content-Type: application/json

###############################################################################
# üìù NOTAS DE TESTING
###############################################################################

# üîç RESPUESTAS ESPERADAS:

# GET /slots:
# {
#   "success": true,
#   "data": {
#     "slots": [
#       {
#         "slot": 0,
#         "position": 1,
#         "imageUrl": "url_or_null",
#         "isEmpty": boolean,
#         "isPrimary": boolean
#       },
#       // ... 5 slots m√°s
#     ],
#     "summary": {
#       "total": 6,
#       "occupied": number,
#       "empty": number
#     }
#   }
# }

# PUT /slots/:slot:
# {
#   "success": true,
#   "data": {
#     "slot": { /* objeto slot actualizado */ },
#     "gallery": ["url1", "url2", ...],
#     "primaryImage": "url"
#   }
# }

# DELETE /slots/:slot:
# {
#   "success": true,
#   "data": {
#     "deletedSlot": number,
#     "gallery": ["url1", "url2", ...],
#     "primaryImage": "url"
#   }
# }

# POST /slots/reorder:
# {
#   "success": true,
#   "data": {
#     "slots": [ /* array completo de slots reordenados */ ],
#     "gallery": ["url1", "url2", ...],
#     "primaryImage": "url"
#   }
# }