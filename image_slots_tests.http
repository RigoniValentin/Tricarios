### Variables
@baseUrl = http://localhost:3015/api/v1
# Reemplazar con ID real de un producto existente en tu base de datos
@productId = 66f3c2e5a1b23d4e5f678901

###############################################################################
# üéØ TESTING SISTEMA DE SLOTS INDIVIDUALES DE IM√ÅGENES
###############################################################################

### 1. üìã Obtener informaci√≥n de slots de un producto
# GET /api/v1/products/:id/images
GET {{baseUrl}}/products/{{productId}}/images
Content-Type: application/json

### 2. üìä Verificar que el producto existe primero
# GET /api/v1/products/:id
GET {{baseUrl}}/products/{{productId}}
Content-Type: application/json

###############################################################################
# üîÑ ACTUALIZACI√ìN DE SLOTS INDIVIDUALES
###############################################################################

### 3. üì∏ Actualizar imagen en slot 0 (imagen principal)
# PUT /api/v1/products/:id/images/0
PUT {{baseUrl}}/products/{{productId}}/images/0
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW

------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="image"; filename="new-primary-image.jpg"
Content-Type: image/jpeg

< C:/ruta/a/tu/imagen/nueva-principal.jpg
------WebKitFormBoundary7MA4YWxkTrZu0gW--

### 4. üì∏ Actualizar imagen en slot 2 (tercera posici√≥n)
# PUT /api/v1/products/:id/images/2
PUT {{baseUrl}}/products/{{productId}}/images/2
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW

------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="image"; filename="slot-3-image.jpg"
Content-Type: image/jpeg

< C:/ruta/a/tu/imagen/slot-3.jpg
------WebKitFormBoundary7MA4YWxkTrZu0gW--

### 5. üì∏ Actualizar imagen en slot 5 (√∫ltima posici√≥n)
# PUT /api/v1/products/:id/images/5
PUT {{baseUrl}}/products/{{productId}}/images/5
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW

------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="image"; filename="slot-6-image.jpg"
Content-Type: image/jpeg

< C:/ruta/a/tu/imagen/slot-6.jpg
------WebKitFormBoundary7MA4YWxkTrZu0gW--

###############################################################################
# üóëÔ∏è ELIMINACI√ìN DE SLOTS INDIVIDUALES
###############################################################################

### 6. üóëÔ∏è Eliminar imagen del slot 5 (√∫ltima posici√≥n)
# DELETE /api/v1/products/:id/images/5
DELETE {{baseUrl}}/products/{{productId}}/images/5
Content-Type: application/json

### 7. üóëÔ∏è Eliminar imagen del slot 2 (tercera posici√≥n)
# DELETE /api/v1/products/:id/images/2
DELETE {{baseUrl}}/products/{{productId}}/images/2
Content-Type: application/json

### 8. üóëÔ∏è Intentar eliminar imagen del slot 0 (deber√≠a fallar si es la √∫nica imagen)
# DELETE /api/v1/products/:id/images/0
DELETE {{baseUrl}}/products/{{productId}}/images/0
Content-Type: application/json

###############################################################################
# üîÑ REORDENAMIENTO DE SLOTS
###############################################################################

### 9. üîÑ Mover imagen del slot 3 al slot 1
# POST /api/v1/products/:id/images/1/reorder
POST {{baseUrl}}/products/{{productId}}/images/1/reorder
Content-Type: application/json

{
  "fromSlot": 3
}

### 10. üîÑ Mover imagen del slot 1 al slot 0 (nueva imagen principal)
# POST /api/v1/products/:id/images/0/reorder
POST {{baseUrl}}/products/{{productId}}/images/0/reorder
Content-Type: application/json

{
  "fromSlot": 1
}

### 11. üîÑ Intercambiar im√°genes entre slot 2 y slot 4
# POST /api/v1/products/:id/images/4/reorder
POST {{baseUrl}}/products/{{productId}}/images/4/reorder
Content-Type: application/json

{
  "fromSlot": 2
}

###############################################################################
# ‚ùå CASOS DE ERROR Y VALIDACIONES
###############################################################################

### 12. ‚ùå Slot inv√°lido - mayor a 5
# PUT /api/v1/products/:id/images/6
PUT {{baseUrl}}/products/{{productId}}/images/6
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW

------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="image"; filename="invalid-slot.jpg"
Content-Type: image/jpeg

< C:/ruta/a/tu/imagen/cualquiera.jpg
------WebKitFormBoundary7MA4YWxkTrZu0gW--

### 13. ‚ùå Slot inv√°lido - n√∫mero negativo
# PUT /api/v1/products/:id/images/-1
PUT {{baseUrl}}/products/{{productId}}/images/-1
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW

------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="image"; filename="invalid-slot.jpg"
Content-Type: image/jpeg

< C:/ruta/a/tu/imagen/cualquiera.jpg
------WebKitFormBoundary7MA4YWxkTrZu0gW--

### 14. ‚ùå Producto inexistente
# GET /api/v1/products/000000000000000000000000/images
GET {{baseUrl}}/products/000000000000000000000000/images
Content-Type: application/json

### 15. ‚ùå Actualizar slot sin proporcionar archivo
# PUT /api/v1/products/:id/images/0
PUT {{baseUrl}}/products/{{productId}}/images/0
Content-Type: application/json

### 16. ‚ùå Eliminar slot vac√≠o
# DELETE /api/v1/products/:id/images/4
DELETE {{baseUrl}}/products/{{productId}}/images/4
Content-Type: application/json

### 17. ‚ùå Reordenar con slot inv√°lido
# POST /api/v1/products/:id/images/2/reorder
POST {{baseUrl}}/products/{{productId}}/images/2/reorder
Content-Type: application/json

{
  "fromSlot": 10
}

### 18. ‚ùå Reordenar mismo slot
# POST /api/v1/products/:id/images/2/reorder
POST {{baseUrl}}/products/{{productId}}/images/2/reorder
Content-Type: application/json

{
  "fromSlot": 2
}

###############################################################################
# üß™ FLUJO COMPLETO DE TESTING
###############################################################################

### 19. üß™ Workflow completo: Crear ‚Üí Actualizar ‚Üí Reordenar ‚Üí Eliminar

# Paso 1: Verificar estado inicial
GET {{baseUrl}}/products/{{productId}}/images

### 20. üì∏ Paso 2: Llenar todos los slots
PUT {{baseUrl}}/products/{{productId}}/images/0
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW

------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="image"; filename="slot-1.jpg"
Content-Type: image/jpeg

< C:/ruta/a/tu/imagen/slot-1.jpg
------WebKitFormBoundary7MA4YWxkTrZu0gW--

### 21. üì∏ Llenar slot 1
PUT {{baseUrl}}/products/{{productId}}/images/1
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW

------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="image"; filename="slot-2.jpg"
Content-Type: image/jpeg

< C:/ruta/a/tu/imagen/slot-2.jpg
------WebKitFormBoundary7MA4YWxkTrZu0gW--

### 22. üì∏ Llenar slot 2
PUT {{baseUrl}}/products/{{productId}}/images/2
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW

------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="image"; filename="slot-3.jpg"
Content-Type: image/jpeg

< C:/ruta/a/tu/imagen/slot-3.jpg
------WebKitFormBoundary7MA4YWxkTrZu0gW--

### 23. üìä Verificar todos los slots llenos
GET {{baseUrl}}/products/{{productId}}/images

### 24. üîÑ Reordenar: Mover slot 2 al slot 0 (nueva principal)
POST {{baseUrl}}/products/{{productId}}/images/0/reorder
Content-Type: application/json

{
  "fromSlot": 2
}

### 25. üìä Verificar reordenamiento
GET {{baseUrl}}/products/{{productId}}/images

### 26. üóëÔ∏è Eliminar slot intermedio
DELETE {{baseUrl}}/products/{{productId}}/images/1

### 27. üìä Verificar estado final
GET {{baseUrl}}/products/{{productId}}/images

###############################################################################
# üìù COMPARACI√ìN CON ENDPOINT TRADICIONAL
###############################################################################

### 28. üìã Obtener producto completo para comparar
GET {{baseUrl}}/products/{{productId}}

### 29. üìã Comparar con endpoint de categor√≠as (si aplicable)
GET {{baseUrl}}/categories

###############################################################################
# üìã NOTAS DE TESTING
###############################################################################

# Respuestas esperadas:

# GET /products/:id/images:
# {
#   "success": true,
#   "data": {
#     "productId": "...",
#     "productName": "...",
#     "primaryImage": "...",
#     "slots": [
#       {"slot": 0, "position": 1, "imageUrl": "...", "isEmpty": false, "isPrimary": true},
#       {"slot": 1, "position": 2, "imageUrl": null, "isEmpty": true, "isPrimary": false},
#       ...
#     ],
#     "summary": {"total": 6, "occupied": 2, "empty": 4}
#   }
# }

# PUT /products/:id/images/:slot:
# {
#   "success": true,
#   "message": "Imagen del slot N actualizada exitosamente",
#   "data": {
#     "productId": "...",
#     "slot": N,
#     "position": N+1,
#     "imageUrl": "...",
#     "isPrimary": true/false,
#     "gallery": [...],
#     "primaryImage": "..."
#   }
# }

# DELETE /products/:id/images/:slot:
# {
#   "success": true,
#   "message": "Imagen del slot N eliminada exitosamente",
#   "data": {
#     "productId": "...",
#     "slot": N,
#     "deletedImage": "...",
#     "gallery": [...],
#     "remainingImages": X
#   }
# }

# Casos a verificar:
# ‚úÖ Slots v√°lidos (0-5) vs inv√°lidos (6+, negativos)
# ‚úÖ Productos existentes vs inexistentes
# ‚úÖ Archivos v√°lidos vs inv√°lidos
# ‚úÖ Eliminar √∫ltima imagen (debe fallar)
# ‚úÖ Reordenar con slots v√°lidos vs inv√°lidos
# ‚úÖ Actualizar imagen principal (slot 0)
# ‚úÖ Mantener integridad del array de gallery
# ‚úÖ Actualizaci√≥n correcta del campo image principal